#+title: NOTES ON DSA
* 信息结构
** Intro
计算机程序通常对一些信息表进行操作，这些表包含了元素之间的重要的结构关系。在最简单的情况下，一个表仅仅是
元素的 *线性表* ，也就是说，它的结构的信息仅包括类似于：
successor/predecessor/number_of_element/head/tail.

在更复杂的情况下，一个表可能是N维数组；树结构，表示层次或分支关系；或是更复杂的多重链接结构。

以下定义术语和记号：
一张表中的信息由一组节点（或record, 实体等）；有时我们称之为项或元素，作为一个有趣的例子，如果我们打算
利用表格来表示扑克牌，我们可以分成五个字段：TAG, SUIT, RANK, NEXT, TITLE.

一个节点的地址，也叫一个链接、指针或该节点的引用，是他头一个字的内存单元，一个节点内任何字段都可以表示
程序员想表示的东西（数，字母，链接等）。在扑克牌的例子中，我们用TAG=1表示这张牌是面朝下的。SUIT=1, 2
, 3, 4表示四种花色；RANK=1..13; NEXT 是对这张组牌下面牌的链接。

下面我们写一个简单算法，把一张面朝上的牌放在顶部，并假定NEWCARD 是一个链接变量，其值是指向新牌的链接。

#+begin_example
A1. NEXT(NEWCARD) <- TOP(把适当的链接放入新牌节点中)
A2. TOP <- NEWCARD (设置新牌在顶部)
A3. TAG(TOP) <- 0
#+end_example
** 线性表
*** 栈、队列和双端队列
我们不只要考虑数据结构，还要考虑对数据结构的操作。为了进一步说明，我们考虑计算机硬件设计的一个相关
方面。一台计算机的内存通常被分类为“随机存取存储器”，或者“只读存储器”，或者一个“辅助的海量存储器”。
他们三个虽然叫做存储器，但是对他们的操作的种类实际上是不一样的。

一个 *线性表* 是 n $\ge$ 0个节点的一个序列，这个序列的实际的结构性质只设计这些项之间的相对位置。
对于这样的一个结构，我们可能要实施的运算可能包括：
a. 访问表的k 个节点，查看或改变它的值
b. 在k 个节点之前和之后插入新节点。
c. 删去第k个节点
d. 把两个或多个线性表组合成一个表
e. 把一个线性表分成多个表
f. 复制一个线性表
g. 确定节点个数
h. 排序
i. 查找

其中，排序和查找是TAOCP第5， 6章的主题。根据最经常用到的种类，我们可以有许多方式定义线性表。
我们经常遇到的线性表几乎在最后和头一个节点插入：
1. 栈是所有插入和删除都在表的一端进行的一种线性表
2. 队列是插入在一端，而修改在另一端
3. 双端队列是插入和删除在表的两端进行的

我们可以这样看待这三个数据结构：

[[file:./images/screenshot-05.png]]
[[file:./images/screenshot-06.png]]

一般的，栈最经常同明显的或隐含的递归算法有关。我们用以下记号把 $x$ 插入 A:
$$A \leftarrow x$$
**** 习题
1. 输出受限和输入受限的双端队列可以作为栈和队列操作
2. 123456 -> 325641 是可以的: ~SSSXXSSXSXXX~, 而154623是不可能的，如果5是第二，意味着
   234已经入栈，所以23出栈的顺序只可能是32
3. 这个规则可能是：对于任意的 $k \in [1, n)$, ~num_of_X(0,k)~ $\le$ ~num_of_S(0, k)~
4. 思路：排列个数为 $n! - x$, 其中x是不允许的个数。
